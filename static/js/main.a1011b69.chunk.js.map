{"version":3,"sources":["components/Editor/Editor.jsx","components/Previewer/Previewer.jsx","App.js","index.js"],"names":["Editor","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","__html","marked","sanitize","react_default","a","createElement","className","name","id","cols","rows","onChange","props","handleInputChange","inputText","Component","Previewer","dangerouslySetInnerHTML","getInputText","placeholderMarkdown","App","_this","call","e","setState","target","state","components_Editor_Editor","Previewer_Previewer","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"gPAqCeA,SAjCf,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,kBAAAC,MAAA,WAQI,MAAO,CAAEC,OANOC,IAAM,oGAIpB,CAAEC,UAAU,OANlB,CAAAJ,IAAA,SAAAC,MAAA,WAYI,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,UAGAH,EAAAC,EAAAC,cAAA,YACEE,KAAK,MACLC,GAAG,GACHC,KAAK,KACLC,KAAK,KACLJ,UAAU,eACVK,SAAUpB,KAAKqB,MAAMC,mBAEpBtB,KAAKqB,MAAME,gBAzBtB3B,EAAA,CAA4B4B,cCSbC,MAXf,SAAmBJ,GACjB,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,aACAH,EAAAC,EAAAC,cAAA,OACEC,UAAU,mBACVW,wBAAyBL,EAAMM,mBCUjCC,EAAmB,8qCA+FVC,cA5Bb,SAAAA,EAAYR,GAAO,IAAAS,EAAA,OAAAhC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6B,IACjBC,EAAAhC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+B,GAAAE,KAAA/B,KAAMqB,KAMRC,kBAAoB,SAAAU,GAClBF,EAAKG,SAAS,CACZV,UAAWS,EAAEE,OAAO1B,SATLsB,EAanBH,aAAe,WAEb,MAAO,CAAElB,OADOC,IAAOoB,EAAKK,MAAMZ,UAAW,CAAEZ,UAAU,MAZzDmB,EAAKK,MAAQ,CACXZ,UAAWK,GAHIE,wEAmBjB,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACsB,EAAD,CAAQd,kBAAmBtB,KAAKsB,kBAAmBC,UAAWvB,KAAKmC,MAAMZ,YACzEX,EAAAC,EAAAC,cAACuB,EAAD,CAAWV,aAAc3B,KAAK2B,uBAvBpBH,aChFlBc,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.a1011b69.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport marked from 'marked';\r\n\r\nexport class Editor extends Component {\r\n  getMarkdownText() {\r\n    let rawMarkup = marked(\r\n      `You can also make text **bold**... whoa! \r\n    Or _italic_.\r\n    Or... wait for it... **_both!_**`,\r\n      { sanitize: true },\r\n    );\r\n    return { __html: rawMarkup };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"editor-container containers\">\r\n        <div className=\"editor-title\">\r\n          Editor\r\n        </div>\r\n        <textarea\r\n          name=\"xxx\"\r\n          id=\"\"\r\n          cols=\"30\"\r\n          rows=\"15\"\r\n          className=\"editor-input\"\r\n          onChange={this.props.handleInputChange}\r\n        >\r\n          {this.props.inputText}\r\n        </textarea>\r\n        {/* <div  dangerouslySetInnerHTML={this.getInputText()}  style={{position: \"absolute\", bottom: \"0%\", width: 666, zIndex: 55}}/> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Editor;\r\n","import React from 'react';\r\n\r\nfunction Previewer(props) {\r\n  return (\r\n    <div className=\"previewer-container containers\">\r\n      <div className=\"previewer-title\">Previewer</div>\r\n      <div\r\n        className=\"previewer-output\"\r\n        dangerouslySetInnerHTML={props.getInputText()}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default Previewer;\r\n","import React, { Component } from 'react';\nimport marked from 'marked';\n\nimport './App.css';\n\nimport Editor from './components/Editor/Editor';\nimport Previewer from './components/Previewer/Previewer';\n\n\n\n\n\n\n\n\n\n\n\nconst placeholderMarkdown = \n`# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputText: placeholderMarkdown,\n    };\n  }\n\n  handleInputChange = e => {\n    this.setState({\n      inputText: e.target.value,\n    });\n  };\n\n  getInputText = () => {\n    let rawMarkup = marked(this.state.inputText, { sanitize: true });\n    return { __html: rawMarkup };\n  }\n\n  render() {\n    return (\n      <div className=\"app-container\">\n        <Editor handleInputChange={this.handleInputChange} inputText={this.state.inputText}/>\n        <Previewer getInputText={this.getInputText}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}